
# Entrypoint is also needed as image by default set `terraform` binary as an
# entrypoint.
image:
  name: williamyeh/ansible:ubuntu18.04
#  entrypoint:
#    - '/usr/bin/env'
#    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
#    - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'
#    - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}'

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json

cache:
  paths:
    - .terraform

before_script:
  - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  - ./terraform --version
  - ./terraform init

stages:
  - validate
  - build
  - test
  - deploy
  - destroy

validate:
  stage: validate
  script:
    - echo $AWS_ACCESS_KEY_ID
    - echo $AWS_SECRET_ACCESS_KEY
    - echo "Terraform validate"
    - ./terraform validate


plan:
  stage: build
  script:
    - echo "Building..... terraform plan"
    - ./terraform plan -out=$PLAN
#    - ./terraform show --json $PLAN | convert_report > $JSON_PLAN_FILE
  artifacts:
    paths:
      - $PLAN
    reports:
      terraform: $JSON_PLAN_FILE
# Separate apply job for manual launching Terraform as it can be destructive
# action.
apply:
  stage: deploy
  environment:
    name: production
  script:
    - echo "in Production"
    - ./terraform apply -input=false $PLAN
  dependencies:
    - plan
  when: manual
  only:
    - master

# Separate destroy job for manual launching Terraform as it can be destructive
# action.
destroy:
  stage: deploy
  environment:
    name: production
  script:
    - echo "in Production"
    - ./terraform destroy -input=false -auto-approve
  dependencies:
    - plan
  when: manual
  only:
    - master
